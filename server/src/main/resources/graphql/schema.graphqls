type CoinsObject {
	name: String
	userID: String
	description: String
	creationDate: String
}

type Dataset {
  datasetId: Int!
  filepath: String!
}

type Function {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: Function
	parts: [Function]
	requirements: [Requirement]
	input: SystemInterface
	output: SystemInterface
}

type Hamburger {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: Hamburger
	parts: [Hamburger]
	functionalUnit: SystemSlot
	technicalSolution: RealisationModule
	portRealisations: [PortRealisation]
	startDate: String
	endDate: String
}

type NumericProperty {
	datasetId: Int!
	uri: String!
	label: String!
	datatypeValue: Float
	type: String
	unit: String
}

type Performance {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: Performance
	parts: [Performance]
	value: NumericProperty
}

type PortRealisation {
	datasetId: Int!
	uri: String!
	label: String!
	assembly: PortRealisation
	parts: [PortRealisation]
	interface: SystemInterface
	port: RealisationPort
}

type RealisationModule {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: RealisationModule
	parts: [RealisationModule]
	performances: [Performance]
	ports: [RealisationPort]
	hamburgers: [Hamburger]
}

type RealisationPort {
	datasetId: Int!
	uri: String!
	label: String!
	assembly: RealisationPort
	parts: [RealisationPort]
	performances: [Performance]
}

type Requirement {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: Requirement
	parts: [Requirement]
	minValue: NumericProperty
	maxValue: NumericProperty
}

type SystemInterface {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: SystemInterface
	parts: [SystemInterface]
	systemSlot0: SystemSlot
	systemSlot1: SystemSlot
	requirements: [Requirement]
}

type SystemSlot {
	coins: CoinsObject
	datasetId: Int!
	uri: String!
	label: String!
	assembly: SystemSlot
	parts: [SystemSlot]
	functions: [Function]
	requirements: [Requirement]
	interfaces: [SystemInterface]
	hamburgers: [Hamburger]
}

type Query {
  allDatasets: [Dataset]
  allFunctions(datasetId: Int!): [Function]
  allHamburgers(datasetId: Int!): [Hamburger]
  allNumericProperties(datasetId: Int!): [NumericProperty]
  allPerformances(datasetId: Int!): [Performance]
  allRealisationModules(datasetId: Int!): [RealisationModule]
  allRequirements(datasetId: Int!): [Requirement]
  allSystemInterfaces(datasetId: Int!): [SystemInterface]
  allSystemSlots(datasetId: Int!): [SystemSlot]
  oneHamburger(datasetId: Int!, uri: String!): Hamburger
  onePortRealisation(datasetId: Int!, uri: String!): PortRealisation
  oneRealisationModule(datasetId: Int!, uri: String!): RealisationModule
  oneRealisationPort(datasetId: Int!, uri: String!): RealisationPort
  oneSystemSlot(datasetId: Int!, uri: String!): SystemSlot
}

input CoinsObjectInput {
	name: String
	userID: String
	description: String
	creationDate: String
}

input FunctionInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	requirements: [String]
	input: String
	output: String
}

input HamburgerInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	functionalUnit: String
	technicalSolution: String
	portRealisations: [String]
	startDate: String
	endDate: String
}

input NumericPropertyInput {
	datasetId: Int!
	uri: String!
	label: String
	datatypeValue: Float
}

input PerformanceInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	value: String
}

input PortRealisationInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	interface: String
	port: String
}

input RealisationModuleInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	performances: [String]
	ports: [String]
}

input RealisationPortInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	performances: [String]
}

input RequirementInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	minValue: String
	maxValue: String
}

input SystemInterfaceInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	systemSlot0: String
	systemSlot1: String
	requirements: [String]
}

input SystemSlotInput {
	datasetId: Int!
	uri: String!
	label: String
	assembly: String
	parts: [String]
	functions: [String]
	requirements: [String]
	interfaces: [String]
}

type Mutation {
  createFunction(datasetId: Int!, uri: String!, label: String!): Function
  createHamburger(datasetId: Int!, uri: String!, label: String!): Hamburger
  createNumericProperty(datasetId: Int!, uri: String!, label: String!): NumericProperty
  createPerformance(datasetId: Int!, uri: String!, label: String!): Performance
  createPortRealisation(datasetId: Int!, uri: String!, label: String!): PortRealisation
  createRealisationModule(datasetId: Int!, uri: String!, label: String!): RealisationModule
  createRealisationPort(datasetId: Int!, uri: String!, label: String!): RealisationPort
  createRequirement(datasetId: Int!, uri: String!, label: String!): Requirement
  createSystemInterface(datasetId: Int!, uri: String!, label: String!): SystemInterface
  createSystemSlot(datasetId: Int!, uri: String!, label: String!): SystemSlot
  updateFunction(functionInput: FunctionInput!, coinsObjectInput: CoinsObjectInput): Function
  updateHamburger(hamburgerInput: HamburgerInput!, coinsObjectInput: CoinsObjectInput): Hamburger
  updateNumericProperty(numericPropertyInput: NumericPropertyInput!): NumericProperty
  updatePerformance(performanceInput: PerformanceInput!, coinsObjectInput: CoinsObjectInput): Performance
  updatePortRealisation(portRealisationInput: PortRealisationInput!): PortRealisation
  updateRealisationModule(realisationModuleInput: RealisationModuleInput!, coinsObjectInput: CoinsObjectInput): RealisationModule
  updateRealisationPort(realisationPortInput: RealisationPortInput!): RealisationPort
  updateRequirement(requirementInput: RequirementInput, coinsObjectInput: CoinsObjectInput): Requirement
  updateSystemInterface(systemInterfaceInput: SystemInterfaceInput!, coinsObjectInput: CoinsObjectInput): SystemInterface
  updateSystemSlot(systemSlotInput: SystemSlotInput!, coinsObjectInput: CoinsObjectInput): SystemSlot
  deleteFunction(datasetId: Int!, uri: String!): Function
  deleteHamburger(datasetId: Int!, uri: String!): Hamburger
  deleteNumericProperty(datasetId: Int!, uri: String!): NumericProperty
  deletePerformance(datasetId: Int!, uri: String!): Performance
  deletePortRealisation(datasetId: Int!, uri: String!): PortRealisation
  deleteRealisationModule(datasetId: Int!, uri: String!): RealisationModule
  deleteRealisationPort(datasetId: Int!, uri: String!): RealisationPort
  deleteRequirement(datasetId: Int!, uri: String!): Requirement
  deleteSystemInterface(datasetId: Int!, uri: String!): SystemInterface
  deleteSystemSlot(datasetId: Int!, uri: String!): SystemSlot
}

schema {
  query: Query
  mutation: Mutation
}
